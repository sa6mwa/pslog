package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
)

func main() {
	var (
		input     = flag.String("input", "sample-data/log.json", "path to source log file")
		output    = flag.String("output", "benchmark/production_data_generated.go", "path to generated go file")
		limit     = flag.Int("limit", 300, "number of log entries to embed")
		pkg       = flag.String("package", "benchmark", "package name for the generated file")
		exportVar = flag.String("export", "EmbeddedProductionDataset", "exported slice variable name")
		aliasVar  = flag.String("alias", "embeddedProductionDataset", "internal alias name (empty to skip)")
	)
	flag.Parse()

	inFile, err := os.Open(*input)
	if err != nil {
		panic(err)
	}
	defer inFile.Close()

	outDir := filepath.Dir(*output)
	if err := os.MkdirAll(outDir, 0o755); err != nil {
		panic(err)
	}

	outFile, err := os.Create(*output)
	if err != nil {
		panic(err)
	}
	defer outFile.Close()

	writer := bufio.NewWriter(outFile)
	fmt.Fprintf(writer, "// Code generated by tools/gen_production_data; DO NOT EDIT.\n")
	fmt.Fprintf(writer, "package %s\n\n", *pkg)
	fmt.Fprintf(writer, "var %s = []string{\n", *exportVar)

	scanner := bufio.NewScanner(inFile)
	count := 0
	for scanner.Scan() {
		line := scanner.Text()
		fmt.Fprintf(writer, "\t%s,\n", strconv.Quote(line))
		count++
		if *limit > 0 && count >= *limit {
			break
		}
	}
	if err := scanner.Err(); err != nil {
		panic(err)
	}

	fmt.Fprintf(writer, "}\n")

	if *aliasVar != "" && *aliasVar != *exportVar {
		fmt.Fprintf(writer, "\nvar %s = %s\n", *aliasVar, *exportVar)
	}

	if err := writer.Flush(); err != nil {
		panic(err)
	}
}
